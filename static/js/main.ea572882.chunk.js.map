{"version":3,"sources":["components/TopBar.jsx","components/SingleLink.jsx","components/MainContent.jsx","App.js","serviceWorker.js","index.js"],"names":["TopBar","className","React","Component","SingleLink","props","href","url","name","MainContent","searchButtonClick","addToAllowedTags","state","tag","handleKeyDown","event","key","setState","showLink","tags","i","j","flag","allowedTags","length","handleChange","bind","this","target","value","type","onChange","onKeyDown","onClick","map","links","link","App","src","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ea572882.chunk.js","sourcesContent":["import React from 'react';\nimport '../style.css'\n\nclass TopBar extends React.Component {\n  render(){\n    return (\n      <div className=\"top-bar-main\">\n        <div className=\"top-bar-name\">JOURNEY</div>\n        <div className=\"top-bar-caption\">A light weight browser for us</div>\n      </div>\n    );\n  }\n}\n\nexport default TopBar;\n","import React from 'react';\n\nconst SingleLink =(props)=> {\n    return (\n        <a href={props.url} className=\"single-link-main\">{props.name}</a>\n    );\n}\n\nexport default SingleLink;\n","import React from 'react';\nimport '../style.css';\nimport SingleLink from './SingleLink';\nimport links from '../data/links.json';\n\nclass MainContent extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state={\n            tag:\"\",\n            allowedTags:[],\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n    searchButtonClick=()=>{\n        this.addToAllowedTags(this.state.tag)\n    }\n\n    handleChange(event) {\n        this.setState({tag: event.target.value});\n    }\n    handleKeyDown=(event)=>{\n        if(event.key==='Enter'){\n            this.addToAllowedTags(this.state.tag);\n            this.setState({tag:\"\"});\n        }\n    }\n\n    showLink=tags=>{\n        const {allowedTags}=this.state;\n        let i,j,flag;\n        if(allowedTags.length===0)\n            return true;\n        for(i=0;i<allowedTags.length;i++){\n            flag=false;\n            for(j=0;j<tags.length;j++){\n                if(allowedTags[i]===tags[j]){\n                    flag=true;\n                    break;\n                }\n            }\n            if(flag===false){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    addToAllowedTags=tag=>{\n        const {allowedTags}=this.state;\n        this.setState({allowedTags:[...allowedTags,tag]})\n    }\n\n    render(){\n        return (\n        <div className=\"main-content\">\n            <div className=\"input-link-main\">\n                <input \n                    type=\"text\" \n                    value={this.state.value} \n                    onChange={this.handleChange} \n                    className=\"input-link\"\n                    onKeyDown={this.handleKeyDown}\n                />\n                <button\n                    type=\"button\"\n                    name=\"search\"\n                    onClick={this.searchButtonClick}\n                    className=\"link-search-button\"\n                >\n                S\n                </button>\n            </div>\n            <div className=\"show-tags\">\n            {\n                this.state.allowedTags.map(tag=>(\n                    <div className=\"show-tag\">#{tag}</div>\n                ))\n            }\n            </div>\n            <div className=\"all-links\">\n               {links.map(link=>{\n                    if(this.showLink(link.tags)){\n                        return <SingleLink url={link.url} name={link.name}/>\n                    }\n                    return <div/>\n               })}\n            </div> \n        </div>\n        );\n    }\n}\n\nexport default MainContent;\n","import React from 'react';\nimport TopBar from './components/TopBar'\nimport MainContent from './components/MainContent'\nimport './style.css';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      src:\"https://journey-cp.github.io\"\n    }\n  }\n  render(){\n    return (\n      <div className=\"app-main\">\n        <TopBar/>\n        <MainContent/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}